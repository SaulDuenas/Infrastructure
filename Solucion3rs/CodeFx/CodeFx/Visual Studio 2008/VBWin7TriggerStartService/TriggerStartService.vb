'********************************** Module Header **********************************'
' Module Name:	TriggerStartService.vb
' Project:		VBWin7TriggerStartService
' Copyright (c) Microsoft Corporation.
' 
' Services and background processes have tremendous influence on the overall 
' performance of the system. If we could just cut down on the total number of 
' services, we would reduce the total power consumption and increase the overall 
' stability of the system. The Windows 7 Service Control Manager has been extended 
' so that a service can be automatically started and stopped when a specific system 
' event, or trigger, occurs on the system. The new mechanism is called Service 
' Trigger Event. A service can register to be started or stopped when a trigger event 
' occurs. This eliminates the need for services to start when the system starts, or 
' for services to poll or actively wait for an event; a service can start when it is 
' needed, instead of starting automatically whether or not there is work to do. 
' Examples of predefined trigger events include arrival of a device of a specified 
' device interface class or availability of a particular firewall port. A service can 
' also register for a custom trigger event generated by an Event Tracing for Windows 
' (ETW) provider.
' 
' VBWin7TriggerStartService demonstrates a trigger-start Windows Service made in 
' VB.NET. The service is configured to start when a generic USB disk becomes 
' available. It also shows how to trigger-start when the first IP address becomes 
' available, and trigger-stop when the last IP address becomes unavailable. The start 
' and stop events are reported in Application event log.
' 
' This source is subject to the Microsoft Public License.
' See http://www.microsoft.com/opensource/licenses.mspx#Ms-PL.
' All other rights reserved.
' 
' History:
' * 8/1/2009 4:50 AM Jialiang Ge Created
'***********************************************************************************'

#Region "Imports directives"

Imports System.ServiceProcess
Imports System.Runtime.InteropServices

#End Region


Public Class TriggerStartService

    ''' <summary>
    ''' Determine if the current service is trigger-start
    ''' </summary>
    ''' <returns></returns>
    Protected Function IsTriggerStartService() As Boolean

        Using sc As ServiceController = New ServiceController(MyBase.ServiceName)
            ' Query the service trigger info size of the current serivce
            Dim cbBytesNeeded As Integer = -1
            ServiceNative.QueryServiceConfig2( _
            sc.ServiceHandle.DangerousGetHandle, _
            ServiceConfig2InfoLevel.SERVICE_CONFIG_TRIGGER_INFO, _
            IntPtr.Zero, 0, cbBytesNeeded)
            If (cbBytesNeeded = -1) Then
                ' If failed, throw the error information
                Throw Marshal.GetExceptionForHR(Marshal.GetLastWin32Error)
            End If

            ' Allocate memory for the service trigger info struct
            Dim pBuffer As IntPtr = Marshal.AllocHGlobal(cbBytesNeeded)

            ' Retrieve the service trigger info
            If (ServiceNative.QueryServiceConfig2( _
                sc.ServiceHandle.DangerousGetHandle, _
                ServiceConfig2InfoLevel.SERVICE_CONFIG_TRIGGER_INFO, _
                pBuffer, cbBytesNeeded, cbBytesNeeded) = 0) Then
                ' If failed, clean up the memory and throw the error
                Marshal.FreeHGlobal(pBuffer)
                Throw Marshal.GetExceptionForHR(Marshal.GetLastWin32Error)
            End If

            ' Determine if the serivce is trigger-start
            Dim serviceTriggerInfo As SERVICE_TRIGGER_INFO = DirectCast( _
            Marshal.PtrToStructure(pBuffer, GetType(SERVICE_TRIGGER_INFO)),  _
            SERVICE_TRIGGER_INFO)
            Dim bTriggerStart As Boolean = (serviceTriggerInfo.cTriggers > 0)

            Marshal.FreeHGlobal(pBuffer)

            Return bTriggerStart
        End Using

    End Function


    Protected Overrides Sub OnStart(ByVal args() As String)
        ' Add code here to start your service. This method should set things
        ' in motion so your service can do its work.
        Me.EventLog1.WriteEntry("VBWin7TriggerStartService is in OnStart.")
        If (IsTriggerStartService()) Then
            Me.EventLog1.WriteEntry("Service trigger events are enabled.")
            ' Consider stopping the service
            'Me.Stop()
        Else
            Me.EventLog1.WriteEntry("Service trigger events are NOT enabled.")
            ' Usually use a timer to poll the status
            '...
        End If
    End Sub


    Protected Overrides Sub OnStop()
        ' Add code here to perform any tear-down necessary to stop your service.
        Me.EventLog1.WriteEntry("VBWin7TriggerStartService is in OnStop.")
        If (IsTriggerStartService()) Then
            Me.EventLog1.WriteEntry("Service trigger events are enabled.")
            ' Consider stopping the service
            'Me.Stop()
        Else
            Me.EventLog1.WriteEntry("Service trigger events are NOT enabled.")
            ' Usually use a timer to poll the status
            '...
        End If
    End Sub

End Class
