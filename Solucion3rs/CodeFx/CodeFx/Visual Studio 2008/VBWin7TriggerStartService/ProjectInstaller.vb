'************************************** Module Header **************************************'
' Module Name:	ProjectInstaller.vb
' Project:		VBWin7TriggerStartService
' Copyright (c) Microsoft Corporation.
' 
' In ProjectInstaller, we configured the service to start when a generic USB disk becomes 
' available. It also shows how to trigger-start when the first IP address becomes available, 
' and trigger-stop when the last IP address becomes unavailable. 
' 
' This source is subject to the Microsoft Public License.
' See http://www.microsoft.com/opensource/licenses.mspx#Ms-PL.
' All other rights reserved.
' 
' History:
' * 8/2/2009 7:12 AM Jialiang Ge Created
'*******************************************************************************************'

#Region "Imports directives"

Imports System.ComponentModel
Imports System.Configuration.Install
Imports System.ServiceProcess
Imports System.Runtime.InteropServices

#End Region


Public Class ProjectInstaller

    Public Sub New()
        MyBase.New()
        'This call is required by the Component Designer.
        InitializeComponent()
    End Sub

    Private Sub TriggerStartServiceInstaller_AfterInstall( _
    ByVal sender As System.Object, ByVal e As System.Configuration.Install.InstallEventArgs) _
    Handles TriggerStartServiceInstaller.AfterInstall

        ' Service trigger events are not supported until Windows Server 2008 R2 and Windows 7
        ' Windows Server 2008 R2 and Windows 7 have major version 6 and minor version 1
        If (Environment.OSVersion.Version >= New Version(6, 1)) Then

            Console.WriteLine("Configuring trigger-start service...")

            ' Set the service to trigger-start when a generic USB disk becomes available.
            SetServiceTriggerStartOnUSBArrival(TriggerStartServiceInstaller.ServiceName)

            ' [-or-]

            ' Set the service to trigger-start when the first IP address becomes available, 
            ' and trigger-stop when the last IP address becomes unavailable.
            'SetServiceTriggerStartOnIPAddressArrival(TriggerStartServiceInstaller.ServiceName)

        Else
            Console.WriteLine("The current system does not support trigger-start service.")
        End If

    End Sub


    ''' <summary>
    ''' The GUID_DEVINTERFACE_DISK device interface class is defined for hard disk
    ''' storage devices.
    ''' http://msdn.microsoft.com/en-us/library/bb663157.aspx
    ''' </summary>
    Private Shared ReadOnly GUID_DEVINTERFACE_DISK As New Guid( _
    "53F56307-B6BF-11D0-94F2-00A0C91EFB8B")

    ''' <summary>
    ''' Hardware ID generated by the USB storage port driver.
    ''' </summary>
    ''' <remarks></remarks>
    Private Const USBHardwareId As String = "USBSTOR\GenDisk"

    ''' <summary>
    ''' The event is triggered when the first IP address on the TCP/IP networking stack 
    ''' becomes available. 
    ''' </summary>
    Private Shared ReadOnly NETWORK_MANAGER_FIRST_IP_ADDRESS_ARRIVAL_GUID As New Guid( _
    "4F27F2DE-14E2-430B-A549-7CD48CBC8245")

    ''' <summary>
    ''' The event is triggered when the last IP address on the TCP/IP networking stack 
    ''' becomes unavailable.
    ''' </summary>
    ''' <remarks></remarks>
    Private Shared ReadOnly NETWORK_MANAGER_LAST_IP_ADDRESS_REMOVAL_GUID As New Guid( _
    "CC4BA62A-162E-4648-847A-B6BDF993E335")


    ''' <summary>
    ''' Set the service to trigger-start when a generic USB disk becomes available.
    ''' </summary>
    ''' <param name="serviceName"></param>
    Private Sub SetServiceTriggerStartOnUSBArrival(ByVal serviceName As String)
        Using sc As ServiceController = New ServiceController(serviceName)

            ' Marshal Guid struct GUID_DEVINTERFACE_DISK to native memory
            Dim pGuidUSBDevice As IntPtr = Marshal.AllocHGlobal(Marshal.SizeOf(GetType(Guid)))
            Marshal.StructureToPtr(GUID_DEVINTERFACE_DISK, pGuidUSBDevice, False)

            ' Allocate and set the SERVICE_TRIGGER_SPECIFIC_DATA_ITEM structure
            Dim deviceData As SERVICE_TRIGGER_SPECIFIC_DATA_ITEM
            deviceData.dwDataType = ServiceTriggerDataType.SERVICE_TRIGGER_DATA_TYPE_STRING
            deviceData.cbData = (USBHardwareId.Length + 1) * 2
            Dim pUSBHardwareId As IntPtr = Marshal.StringToHGlobalUni(USBHardwareId)
            deviceData.pData = pUSBHardwareId
            ' Marshal the SERVICE_TRIGGER_SPECIFIC_DATA_ITEM struct to native memory
            Dim pDeviceData As IntPtr = Marshal.AllocHGlobal( _
            Marshal.SizeOf(GetType(SERVICE_TRIGGER_SPECIFIC_DATA_ITEM)))
            Marshal.StructureToPtr(deviceData, pDeviceData, False)

            ' Allocate and set the SERVICE_TRIGGER structure
            Dim serviceTrigger As SERVICE_TRIGGER
            serviceTrigger.dwTriggerType = _
            ServiceTriggerType.SERVICE_TRIGGER_TYPE_DEVICE_INTERFACE_ARRIVAL
            serviceTrigger.dwAction = _
            ServiceTriggerAction.SERVICE_TRIGGER_ACTION_SERVICE_START
            serviceTrigger.pTriggerSubtype = pGuidUSBDevice
            serviceTrigger.cDataItems = 1
            serviceTrigger.pDataItems = pDeviceData
            ' Marshal the SERVICE_TRIGGER struct to native memory
            Dim pServiceTrigger As IntPtr = Marshal.AllocHGlobal( _
            Marshal.SizeOf(GetType(SERVICE_TRIGGER)))
            Marshal.StructureToPtr(serviceTrigger, pServiceTrigger, False)

            ' Allocate and set the SERVICE_TRIGGER_INFO structure. 
            Dim serviceTriggerInfo As New SERVICE_TRIGGER_INFO
            serviceTriggerInfo.cTriggers = 1
            serviceTriggerInfo.pTriggers = pServiceTrigger
            ' Marshal the SERVICE_TRIGGER_INFO struct to native memory
            Dim pServiceTriggerInfo As IntPtr = Marshal.AllocHGlobal( _
            Marshal.SizeOf(GetType(SERVICE_TRIGGER_INFO)))
            Marshal.StructureToPtr(serviceTriggerInfo, pServiceTriggerInfo, False)

            ' Call ChangeServiceConfig2 with the SERVICE_CONFIG_TRIGGER_INFO level 
            ' and pass to it the address of the SERVICE_TRIGGER_INFO structure.
            Dim bSuccess As Boolean = ServiceNative.ChangeServiceConfig2( _
            sc.ServiceHandle.DangerousGetHandle, _
            ServiceConfig2InfoLevel.SERVICE_CONFIG_TRIGGER_INFO, pServiceTriggerInfo)
            Dim errorCode As Integer = Marshal.GetLastWin32Error

            ' Clean up the native resources
            Marshal.FreeHGlobal(pGuidUSBDevice)
            Marshal.FreeHGlobal(pUSBHardwareId)
            Marshal.FreeHGlobal(pDeviceData)
            Marshal.FreeHGlobal(pServiceTrigger)
            Marshal.FreeHGlobal(pServiceTriggerInfo)

            ' If the service failed to be set as trigger start, throw the error 
            ' returned by the ChangeServiceConfig2 function.
            If Not bSuccess Then
                Marshal.ThrowExceptionForHR(errorCode)
            End If

        End Using
    End Sub


    ''' <summary>
    ''' Set the service to trigger-start when the first IP address on the TCP/IP 
    ''' networking stack becomes available, and trigger-stop when the last IP address on 
    ''' the TCP/IP networking stack becomes unavailable.
    ''' </summary>
    ''' <param name="serviceName"></param>
    Private Sub SetServiceTriggerStartOnIPAddressArrival(ByVal serviceName As String)
        Using sc As ServiceController = New ServiceController(serviceName)

            ' Marshal Guid struct NETWORK_MANAGER_FIRST_IP_ADDRESS_ARRIVAL_GUID and 
            ' NETWORK_MANAGER_LAST_IP_ADDRESS_REMOVAL_GUID to native memory
            Dim pGuidIpAddressArrival As IntPtr = Marshal.AllocHGlobal(Marshal.SizeOf(GetType(Guid)))
            Marshal.StructureToPtr(ProjectInstaller.NETWORK_MANAGER_FIRST_IP_ADDRESS_ARRIVAL_GUID, _
                                   pGuidIpAddressArrival, False)
            Dim pGuidIpAddressRemoval As IntPtr = Marshal.AllocHGlobal(Marshal.SizeOf(GetType(Guid)))
            Marshal.StructureToPtr(ProjectInstaller.NETWORK_MANAGER_LAST_IP_ADDRESS_REMOVAL_GUID, _
                                   pGuidIpAddressRemoval, False)

            ' Allocate and set the SERVICE_TRIGGER structure for 
            ' NETWORK_MANAGER_FIRST_IP_ADDRESS_ARRIVAL_GUID to start the service
            Dim serviceTrigger1 As New SERVICE_TRIGGER
            serviceTrigger1.dwTriggerType = _
            ServiceTriggerType.SERVICE_TRIGGER_TYPE_IP_ADDRESS_AVAILABILITY
            serviceTrigger1.dwAction = _
            ServiceTriggerAction.SERVICE_TRIGGER_ACTION_SERVICE_START
            serviceTrigger1.pTriggerSubtype = pGuidIpAddressArrival

            ' Allocate and set the SERVICE_TRIGGER structure for 
            ' NETWORK_MANAGER_LAST_IP_ADDRESS_REMOVAL_GUID to stop the service
            Dim serviceTrigger2 As New SERVICE_TRIGGER
            serviceTrigger2.dwTriggerType = _
            ServiceTriggerType.SERVICE_TRIGGER_TYPE_IP_ADDRESS_AVAILABILITY
            serviceTrigger2.dwAction = _
            ServiceTriggerAction.SERVICE_TRIGGER_ACTION_SERVICE_STOP
            serviceTrigger2.pTriggerSubtype = pGuidIpAddressRemoval

            ' Marshal the two SERVICE_TRIGGER structs to native memory as an array
            Dim pServiceTriggers As IntPtr = Marshal.AllocHGlobal( _
            CInt((Marshal.SizeOf(GetType(SERVICE_TRIGGER)) * 2)))
            Marshal.StructureToPtr(serviceTrigger1, pServiceTriggers, False)
            Marshal.StructureToPtr(serviceTrigger2, _
                                   New IntPtr((CLng(pServiceTriggers) + Marshal.SizeOf(GetType(SERVICE_TRIGGER)))), _
                                   False)

            ' Allocate and set the SERVICE_TRIGGER_INFO structure
            Dim serviceTriggerInfo As New SERVICE_TRIGGER_INFO
            serviceTriggerInfo.cTriggers = 2
            serviceTriggerInfo.pTriggers = pServiceTriggers
            Dim pServiceTriggerInfo As IntPtr = Marshal.AllocHGlobal( _
            Marshal.SizeOf(GetType(SERVICE_TRIGGER_INFO)))
            Marshal.StructureToPtr(serviceTriggerInfo, pServiceTriggerInfo, False)

            ' Call ChangeServiceConfig2 with the SERVICE_CONFIG_TRIGGER_INFO level 
            ' and pass to it the address of the SERVICE_TRIGGER_INFO structure.
            Dim bSuccess As Boolean = ServiceNative.ChangeServiceConfig2( _
            sc.ServiceHandle.DangerousGetHandle, _
            ServiceConfig2InfoLevel.SERVICE_CONFIG_TRIGGER_INFO, pServiceTriggerInfo)
            Dim errorCode As Integer = Marshal.GetLastWin32Error

            ' Clean up the native resources
            Marshal.FreeHGlobal(pGuidIpAddressArrival)
            Marshal.FreeHGlobal(pGuidIpAddressRemoval)
            Marshal.FreeHGlobal(pServiceTriggers)
            Marshal.FreeHGlobal(pServiceTriggerInfo)

            ' If the service failed to be set as trigger start, throw the error 
            ' returned by the ChangeServiceConfig2 function.
            If Not bSuccess Then
                Marshal.ThrowExceptionForHR(errorCode)
            End If

        End Using
    End Sub

End Class
