/********************************** Module Header **********************************\
* Module Name:	TriggerStartService.cs
* Project:		CSWin7TriggerStartService
* Copyright (c) Microsoft Corporation.
* 
* Services and background processes have tremendous influence on the overall 
* performance of the system. If we could just cut down on the total number of 
* services, we would reduce the total power consumption and increase the overall 
* stability of the system. The Windows 7 Service Control Manager has been extended 
* so that a service can be automatically started and stopped when a specific system 
* event, or trigger, occurs on the system. The new mechanism is called Service 
* Trigger Event. A service can register to be started or stopped when a trigger event 
* occurs. This eliminates the need for services to start when the system starts, or 
* for services to poll or actively wait for an event; a service can start when it is 
* needed, instead of starting automatically whether or not there is work to do. 
* Examples of predefined trigger events include arrival of a device of a specified 
* device interface class or availability of a particular firewall port. A service can 
* also register for a custom trigger event generated by an Event Tracing for Windows 
* (ETW) provider.
* 
* CSWin7TriggerStartService demonstrates a trigger-start Windows Service made in 
* Visual C#. The service is configured to start when a generic USB disk becomes 
* available. It also shows how to trigger-start when the first IP address becomes 
* available, and trigger-stop when the last IP address becomes unavailable. The start 
* and stop events are reported in Application event log.
* 
* This source is subject to the Microsoft Public License.
* See http://www.microsoft.com/opensource/licenses.mspx#Ms-PL.
* All other rights reserved.
* 
* History:
* * 8/1/2009 4:50 AM Jialiang Ge Created
\***********************************************************************************/

#region Using directives
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.Linq;
using System.ServiceProcess;
using System.Text;
using System.Runtime.InteropServices;
#endregion


namespace CSWin7TriggerStartService
{
    public partial class TriggerStartService : ServiceBase
    {
        public TriggerStartService()
        {
            InitializeComponent();
        }

        /// <summary>
        /// Determine if the current service is trigger-start
        /// </summary>
        /// <returns></returns>
        protected bool IsTriggerStartService()
        {
            using (ServiceController sc = new ServiceController(this.ServiceName))
            {
                // Query the service trigger info size of the current serivce
                int cbBytesNeeded = -1, errorCode = 0;
                ServiceNative.QueryServiceConfig2(sc.ServiceHandle.DangerousGetHandle(),
                    ServiceConfig2InfoLevel.SERVICE_CONFIG_TRIGGER_INFO,
                    IntPtr.Zero, 0, out cbBytesNeeded);
                if (cbBytesNeeded == -1)
                {
                    // If failed, throw the error information
                    errorCode = Marshal.GetLastWin32Error();
                    throw Marshal.GetExceptionForHR(errorCode);
                }

                // Allocate memory for the service trigger info struct
                IntPtr pBuffer = Marshal.AllocHGlobal(cbBytesNeeded);

                // Retrieve the service trigger info
                bool bSuccess = ServiceNative.QueryServiceConfig2(
                    sc.ServiceHandle.DangerousGetHandle(),
                    ServiceConfig2InfoLevel.SERVICE_CONFIG_TRIGGER_INFO,
                    pBuffer, cbBytesNeeded, out cbBytesNeeded) != 0;
                if (!bSuccess)
                {
                    // If failed, clean up the memory and throw the error
                    Marshal.FreeHGlobal(pBuffer);
                    errorCode = Marshal.GetLastWin32Error();
                    throw Marshal.GetExceptionForHR(errorCode);
                }

                // Determine if the serivce is trigger-start
                SERVICE_TRIGGER_INFO serviceTriggerInfo = (SERVICE_TRIGGER_INFO)
                    Marshal.PtrToStructure(pBuffer, typeof(SERVICE_TRIGGER_INFO));
                bool bTriggerStart = serviceTriggerInfo.cTriggers > 0;

                Marshal.FreeHGlobal(pBuffer);

                return bTriggerStart;
            }
        }

        protected override void OnStart(string[] args)
        {
            this.eventLog1.WriteEntry("CSWin7TriggerStartService is in OnStart.");

            if (IsTriggerStartService())
            {
                this.eventLog1.WriteEntry("Service trigger events are enabled.");

                // Consider stopping the service
                //this.Stop();
            }
            else
            {
                this.eventLog1.WriteEntry("Service trigger events are NOT enabled.");

                // Usually use a timer to poll the status
                // ...
            }
        }

        protected override void OnStop()
        {
            this.eventLog1.WriteEntry("CSWin7TriggerStartService is in OnStop.");

            if (IsTriggerStartService())
            {
                this.eventLog1.WriteEntry("Service trigger events are enabled.");
            }
            else
            {
                this.eventLog1.WriteEntry("Service trigger events are NOT enabled.");
            }
        }
    }
}
