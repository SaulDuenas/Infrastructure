/********************************** Module Header **********************************\
* Module Name:	CppWin7TriggerStartServiceWinService.h
* Project:		CppWin7TriggerStartService
* Copyright (c) Microsoft Corporation.
* 
* Services and background processes have tremendous influence on the overall 
* performance of the system. If we could just cut down on the total number of 
* services, we would reduce the total power consumption and increase the overall 
* stability of the system. The Windows 7 Service Control Manager has been extended 
* so that a service can be automatically started and stopped when a specific system 
* event, or trigger, occurs on the system. The new mechanism is called Service 
* Trigger Event. A service can register to be started or stopped when a trigger event 
* occurs. This eliminates the need for services to start when the system starts, or 
* for services to poll or actively wait for an event; a service can start when it is 
* needed, instead of starting automatically whether or not there is work to do. 
* Examples of predefined trigger events include arrival of a device of a specified 
* device interface class or availability of a particular firewall port. A service can 
* also register for a custom trigger event generated by an Event Tracing for Windows 
* (ETW) provider.
* 
* CppWin7TriggerStartService demonstrates a trigger-start Windows Service made in 
* Visual C++. The service is configured to start when a generic USB disk becomes 
* available. It also shows how to trigger-start when the first IP address becomes 
* available, and trigger-stop when the last IP address becomes unavailable. The start 
* and stop events are reported in Application event log.
* 
* This source is subject to the Microsoft Public License.
* See http://www.microsoft.com/opensource/licenses.mspx#Ms-PL.
* All other rights reserved.
* 
* History:
* * 8/1/2009 4:50 AM Jialiang Ge Created
\***********************************************************************************/

#pragma once

#include <msclr\marshal.h>
#include <msclr\marshal_windows.h>

using namespace msclr::interop;

using namespace System;
using namespace System::Collections;
using namespace System::ServiceProcess;
using namespace System::ComponentModel;
using namespace System::Runtime::InteropServices;


namespace CppWin7TriggerStartService {

	/// <summary>
	/// Summary for CppWin7TriggerStartServiceWinService
	/// </summary>
	///
	/// WARNING: If you change the name of this class, you will need to change the
	///          'Resource File Name' property for the managed resource compiler tool
	///          associated with all .resx files this class depends on.  Otherwise,
	///          the designers will not be able to interact properly with localized
	///          resources associated with this form.
	public ref class CppWin7TriggerStartServiceWinService : public System::ServiceProcess::ServiceBase
	{
	public:
		CppWin7TriggerStartServiceWinService()
		{
			InitializeComponent();
			//
			//TODO: Add the constructor code here
			//
		}
	protected:
		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		~CppWin7TriggerStartServiceWinService()
		{
			if (components)
			{
				delete components;
			}
		}


		/// <summary>
        /// Determine if the current service is trigger-start
        /// </summary>
		bool IsTriggerStartService()
		{
			SC_HANDLE hSCManager = OpenSCManager(NULL, NULL, SC_MANAGER_ALL_ACCESS);
			if (hSCManager == NULL)
			{
				throw Marshal::GetExceptionForHR(GetLastError());
			}

			marshal_context context;

			// Open the service
			SC_HANDLE hService = OpenService(hSCManager,
				context.marshal_as<LPCWSTR>(ServiceName), SERVICE_ALL_ACCESS);
			if (hService == NULL)
			{
				DWORD dwLastError = GetLastError();
				CloseServiceHandle(hSCManager);
				throw Marshal::GetExceptionForHR(dwLastError);
			}

			// Query the service trigger info size of the current serivce
			DWORD cbBytesNeeded = (DWORD)-1;
			QueryServiceConfig2(hService, SERVICE_CONFIG_TRIGGER_INFO, NULL, 0, 
				&cbBytesNeeded);
			if (cbBytesNeeded == (DWORD)-1)
			{
				DWORD dwLastError = GetLastError();
				CloseServiceHandle(hService);
				CloseServiceHandle(hSCManager);
				throw Marshal::GetExceptionForHR(dwLastError);
			}

			// Allocate memory for the service trigger info struct
			PBYTE lpBuffer = (PBYTE)HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, 
				cbBytesNeeded);

			// Retrieve the service trigger info
			if (!QueryServiceConfig2(hService, SERVICE_CONFIG_TRIGGER_INFO, lpBuffer, 
				cbBytesNeeded, &cbBytesNeeded))
			{
				DWORD dwLastError = GetLastError();
				CloseServiceHandle(hService);
				CloseServiceHandle(hSCManager);
				HeapFree(GetProcessHeap(), 0, lpBuffer);
				throw Marshal::GetExceptionForHR(dwLastError);
			}

			PSERVICE_TRIGGER_INFO pTriggerInfo = (PSERVICE_TRIGGER_INFO)lpBuffer;
			bool bTriggerStart = pTriggerInfo->cTriggers > 0;

			HeapFree(GetProcessHeap(), 0, lpBuffer);

			CloseServiceHandle(hService);
			CloseServiceHandle(hSCManager);
			
			return bTriggerStart;
		}


		/// <summary>
		/// Set things in motion so your service can do its work.
		/// </summary>
		virtual void OnStart(array<String^>^ args) override
		{
			eventLog1->WriteEntry("CppWin7TriggerStartService is in OnStart.");

			if (IsTriggerStartService())
			{
				eventLog1->WriteEntry("Service trigger events are enabled.");

				// Consider stopping the service
				//this->Stop();
			}
			else
			{
				eventLog1->WriteEntry("Service trigger events are NOT enabled.");

				// Usually use a timer to poll the status
				// ...
			}
		}

		/// <summary>
		/// Stop this service.
		/// </summary>
		virtual void OnStop() override
		{
			eventLog1->WriteEntry("CppWin7TriggerStartService is in OnStop.");

			if (IsTriggerStartService())
			{
				eventLog1->WriteEntry("Service trigger events are enabled.");
			}
			else
			{
				eventLog1->WriteEntry("Service trigger events are NOT enabled.");
			}
		}

	private: System::Diagnostics::EventLog^  eventLog1;
	protected: 

	private:
		/// <summary>
		/// Required designer variable.
		/// </summary>
		System::ComponentModel::Container ^components;

#pragma region Windows Form Designer generated code
		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		void InitializeComponent(void)
		{
			this->eventLog1 = (gcnew System::Diagnostics::EventLog());
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->eventLog1))->BeginInit();
			// 
			// eventLog1
			// 
			this->eventLog1->Log = L"Application";
			this->eventLog1->Source = L"CppWin7TriggerStartService";
			// 
			// CppWin7TriggerStartServiceWinService
			// 
			this->CanPauseAndContinue = true;
			this->ServiceName = L"CppWin7TriggerStartService";
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^  >(this->eventLog1))->EndInit();

		}
#pragma endregion
	};
}
