========================================================================
    APPLICATION : CppWin7TriggerStartService Project Overview
========================================================================

/////////////////////////////////////////////////////////////////////////////
Use:

Services and background processes have tremendous influence on the overall 
performance of the system. If we could just cut down on the total number of 
services, we would reduce the total power consumption and increase the 
overall stability of the system. The Windows 7 Service Control Manager has 
been extended so that a service can be automatically started and stopped when 
a specific system event, or trigger, occurs on the system. The new mechanism 
is called Service Trigger Event. A service can register to be started or 
stopped when a trigger event occurs. This eliminates the need for services to 
start when the system starts, or for services to poll or actively wait for an 
event; a service can start when it is needed, instead of starting 
automatically whether or not there is work to do. Examples of predefined 
trigger events include arrival of a device of a specified device interface 
class or availability of a particular firewall port. A service can also 
register for a custom trigger event generated by an Event Tracing for Windows 
(ETW) provider.

CppWin7TriggerStartService demonstrates a trigger-start Windows Service made 
in Visual C++. The service is configured to start when a generic USB disk 
becomes available. It also shows how to trigger-start when the first IP 
address becomes available, and trigger-stop when the last IP address becomes 
unavailable. The start and stop events are reported in Application event log.


/////////////////////////////////////////////////////////////////////////////
Prerequisite:

Windows 7
http://www.microsoft.com/windows/windows-7/
Service trigger events are not supported until Windows Server 2008 R2 and 
Windows 7.

Microsoft Windows SDK for Windows 7 and .NET Framework 3.5 SP1
http://www.microsoft.com/downloads/details.aspx?FamilyID=c17ba869-9671-4330-a63e-1fd44e0e2505&displaylang=en


/////////////////////////////////////////////////////////////////////////////
Deployment:

A. Setup

CppWin7TriggerStartService.exe -Install
It installs CppWin7TriggerStartService.exe into SCM as a Windows Service. If 
the current operating system support trigger-start service, the command 
prompt outputs "Configuring trigger-start service...", otherwise, it prints 
"The current system does not support trigger-start service.".

B. Cleanup
CppWin7TriggerStartService.exe -Install /u
It uninstalls CppWin7TriggerStartService from SCM.


/////////////////////////////////////////////////////////////////////////////
Creation:

A. Creating an ordinary Windows Service project

Step1. In Visual Studio 2008, add a new Visual C++ / CLR / Windows Service 
project named CppWin7TriggerStartService.

Step2. Open the service in designer and set the ServiceName property to be 
CppWin7TriggerStartService. Drag and drop an event log component from toolbox 
to the design view, and set its Log property to be Application, and its 
Source to be CppWin7TriggerStartService. The event log component will be used 
to log some application messages.

Step3. Right-click in the design view, and select Add Installer on the 
context menu. This creates the project installer components: 

	serviceProcessInstaller1
	serviceInstaller1

Set the Account property of serviceProcessInstaller1 to be Local System, so 
the service will be run as Local System. Also rename serviceInstaller1 as 
triggerStartServiceInstaller, and make its ServiceName property 
CppWin7TriggerStartService. Keep everything else the default value.

B. Configuring the service to trigger-start when a generic USB disk becomes 
available (or trigger-start when the first IP address becomes available, and 
trigger-stop when the last IP address becomes unavailable.)

Services can be registered as trigger-start from the sc.exe command line 
utility (using the sc triggerinfo command and need to run the Command Shell 
as Administrator), or using the ChangeServiceConfig2 API programmatically. 
The service installer utility of .NET Windows Services (InstallUtil) does not 
support triggerinfo switch, so we do it programmatically. ProjectInstaller's  
AfterInstall event allows us to execute some codes after the serivce is 
installed. We are going to register the service as trigger-start in this 
event handler.

Step1. Add AfterInstall event handler for triggerStartServiceInstaller:

	private: System::Void triggerStartServiceInstaller_AfterInstall(
		System::Object^  sender, System::Configuration::Install::InstallEventArgs^  e) 
	{
	}

Step2. Determine if the current operating system is Windows 7 and above. 
Service trigger events are not supported until Windows Server 2008 R2 and 
Windows 7. Windows Server 2008 R2 and Windows 7 have major version 6 and 
minor version 1.

	if ((Environment::OSVersion->Version >= gcnew Version(6, 1)))
	{
	}
	else
	{
	}

Step3. Set service trigger start on USB arrival.
To modify service configuration programmatically, the Win32 API function 
ChangeServiceConfig2 must be called with the appropriate parameters.

	1. Allocate a SERVICE_TRIGGER_SPECIFIC_DATA_ITEM structure
		a) Set its dwDataType member to SERVICE_TRIGGER_DATA_TYPE_STRING
		b) Set its cbData member to the length of the string 
		   L"USBSTOR\\GenDisk" in bytes
		c) Set its pData member to that string.
	2. Allocate a SERVICE_TRIGGER structure
		a) Set its dwTriggerType member to 
		   SERVICE_TRIGGER_TYPE_DEVICE_INTERFACE_ARRIVAL
		b) Set its dwAction member to SERVICE_TRIGGER_ACTION_SERVICE_START
		c) Set its pTriggerSubtype member to the address of the 
		   GUID_DEVINTERFACE_DISK GUID
		d) Set its cDataItems member to 1 and its pDataItems member to the 
		   address of the structure allocated in the previous step.
	3. Allocate a SERVICE_TRIGGER_INFO structure
		a) Set its cTriggers member to 1 and its pTriggers member to the 
		   address of the structure allocated in the previous step.
	4. Call the ChangeServiceConfig2 function with the 
	   SERVICE_CONFIG_TRIGGER_INFO information level and pass to it the 
	   address of the structure allocated in the previous step. 

The complete code of setting service tigger start on USB arrival is:

	SC_HANDLE hSCManager = OpenSCManager(NULL, NULL, SC_MANAGER_ALL_ACCESS);
	if (hSCManager == NULL)
	{
		throw Marshal::GetExceptionForHR(GetLastError());
	}

	marshal_context context;

	// Open the service to be configured as trigger start on USB arrival
	SC_HANDLE hService = OpenService(hSCManager, 
	context.marshal_as<LPCWSTR>(serviceName), SERVICE_ALL_ACCESS);
	if (hService == NULL)
	{
		DWORD dwLastError = GetLastError();
		CloseServiceHandle(hSCManager);
		throw Marshal::GetExceptionForHR(dwLastError);
	}

	// Hardware ID generated by the USB storage port driver
	LPCWSTR lpszDeviceString = L"USBSTOR\\GenDisk";

	// Allocate and set the SERVICE_TRIGGER_SPECIFIC_DATA_ITEM structure
	SERVICE_TRIGGER_SPECIFIC_DATA_ITEM deviceData = {0};
	deviceData.dwDataType = SERVICE_TRIGGER_DATA_TYPE_STRING;
	deviceData.cbData = (DWORD)((wcslen(lpszDeviceString)+1) * sizeof(WCHAR));
	deviceData.pData = (PBYTE)lpszDeviceString;

	// The GUID_DEVINTERFACE_DISK device interface class is defined for hard 
	// disk storage devices.
	static const GUID GUID_DEVINTERFACE_DISK = {
		0x53f56307, 0xb6bf, 0x11d0, {0x94, 0xf2, 0x00, 0xa0, 0xc9, 0x1e, 0xfb, 0x8b }};

	// Allocate and set the SERVICE_TRIGGER structure
	SERVICE_TRIGGER serviceTrigger = {0};
	serviceTrigger.dwTriggerType = SERVICE_TRIGGER_TYPE_DEVICE_INTERFACE_ARRIVAL;
	serviceTrigger.dwAction = SERVICE_TRIGGER_ACTION_SERVICE_START;
	serviceTrigger.pTriggerSubtype = (GUID*)&GUID_DEVINTERFACE_DISK;
	serviceTrigger.cDataItems = 1;
	serviceTrigger.pDataItems = &deviceData;

	// Allocate and set the SERVICE_TRIGGER_INFO structure. 
	SERVICE_TRIGGER_INFO serviceTriggerInfo = {0};
	serviceTriggerInfo.cTriggers = 1;
	serviceTriggerInfo.pTriggers = &serviceTrigger;

	// Call ChangeServiceConfig2 with the SERVICE_CONFIG_TRIGGER_INFO level 
	// and pass to it the address of the SERVICE_TRIGGER_INFO structure.
	if (!ChangeServiceConfig2(hService, SERVICE_CONFIG_TRIGGER_INFO, &serviceTriggerInfo))
	{
		DWORD dwLastError = GetLastError();
		CloseServiceHandle(hService);
		CloseServiceHandle(hSCManager);
		throw Marshal::GetExceptionForHR(dwLastError);
	}

	CloseServiceHandle(hService);
	CloseServiceHandle(hSCManager);

Step4. Set service trigger start on IP address arrival.
The process is similar to setting service trigger start on USB arrival. The 
complete code of SetServiceTriggerStartOnIPAddressArrival is:

	SC_HANDLE hSCManager = OpenSCManager(NULL, NULL, SC_MANAGER_ALL_ACCESS);
	if (hSCManager == NULL)
	{
		throw Marshal::GetExceptionForHR(GetLastError());
	}

	marshal_context context;

	// Open the service to be configured as trigger start on IP address arrival
	SC_HANDLE hService = OpenService(hSCManager, 
		context.marshal_as<LPCWSTR>(serviceName), SERVICE_ALL_ACCESS);
	if (hService == NULL)
	{
		DWORD dwLastError = GetLastError();
		CloseServiceHandle(hSCManager);
		throw Marshal::GetExceptionForHR(dwLastError);
	}

	SERVICE_TRIGGER serviceTriggers[2];

	// Allocate and set the SERVICE_TRIGGER structure for 
	// NETWORK_MANAGER_FIRST_IP_ADDRESS_ARRIVAL_GUID to start the service
	serviceTriggers[0].dwTriggerType = SERVICE_TRIGGER_TYPE_IP_ADDRESS_AVAILABILITY;
	serviceTriggers[0].dwAction = SERVICE_TRIGGER_ACTION_SERVICE_START;
	serviceTriggers[0].pTriggerSubtype = (GUID*)
		&NETWORK_MANAGER_FIRST_IP_ADDRESS_ARRIVAL_GUID;

	// Allocate and set the SERVICE_TRIGGER structure for 
	// NETWORK_MANAGER_LAST_IP_ADDRESS_REMOVAL_GUID to stop the service
	serviceTriggers[1].dwTriggerType = SERVICE_TRIGGER_TYPE_IP_ADDRESS_AVAILABILITY;
	serviceTriggers[1].dwAction = SERVICE_TRIGGER_ACTION_SERVICE_STOP;
	serviceTriggers[1].pTriggerSubtype = (GUID*)
		&NETWORK_MANAGER_LAST_IP_ADDRESS_REMOVAL_GUID;

	// Allocate and set the SERVICE_TRIGGER_INFO structure
	SERVICE_TRIGGER_INFO serviceTriggerInfo = {0};
	serviceTriggerInfo.cTriggers = 2;
	serviceTriggerInfo.pTriggers = (PSERVICE_TRIGGER)&serviceTriggers;

	// Call ChangeServiceConfig2 with the SERVICE_CONFIG_TRIGGER_INFO level and pass to 
	// it the address of the SERVICE_TRIGGER_INFO structure.
	if (!ChangeServiceConfig2(hService, SERVICE_CONFIG_TRIGGER_INFO, &serviceTriggerInfo))
	{
		DWORD dwLastError = GetLastError();
		CloseServiceHandle(hService);
		CloseServiceHandle(hSCManager);
		throw Marshal::GetExceptionForHR(dwLastError);
	}
			
	CloseServiceHandle(hService);
	CloseServiceHandle(hSCManager);

C. Determinging if service trigger event is enabled inside the service

Unlike auto-start services which typically poll for interesting events using 
periodic timers, trigger-start services act when a trigger starts them and 
then deactivate (stop) themselves when there is no more work to perform. 

Step1. Inside OnStart, check whether the service is configured to 
trigger-start using the IsTriggerStartService method. IsTriggerStartService 
calls QueryServiceConfig2 to query SERVICE_TRIGGER_INFO. If 
SERVICE_TRIGGER_INFO.cTriggers > 0, trigger-start is enabled.

	if (IsTriggerStartService())
	{
		eventLog1->WriteEntry("Service trigger events are enabled.");

		// Consider stopping the service
		//this->Stop();
	}
	else
	{
		eventLog1->WriteEntry("Service trigger events are NOT enabled.");

		// Usually use a timer to poll the status
        // ...
	}


/////////////////////////////////////////////////////////////////////////////
References:

MSDN: Service Trigger Events
http://msdn.microsoft.com/en-us/library/dd405513(VS.85).aspx

Windows 7 Training Kit For Developers 
http://www.microsoft.com/downloads/details.aspx?familyid=1C333F06-FADB-4D93-9C80-402621C600E7&displaylang=en

CodeFx KB: How to create a trigger-start Windows service in Windows 7
http://support.microsoft.com/kb/975425/en-us


/////////////////////////////////////////////////////////////////////////////